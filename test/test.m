clearvars; clc;
addpath('../src/utils/')
addpath('../src/task_allocators/')


%% First input
% Example transition time matrix (symmetric)
T = [ 0  1  3  4  5;
      1  0  7  1  2;
      3  7  0  2  3;
      4  1  2  0  1;
      5  2  3  1  0];

% Example weights (w_jk) and threshold values (a_j)
w1 = [0.5, 0.3, 0.2;  % w_11, w_12, w_13 for candidate 1
     0.6, 0.2, 0.2;  % w_21, w_22, w_23 for candidate 2
     0.4, 0.4, 0.2;  % w_31, w_32, w_33 for candidate 3
     0.7, 0.2, 0.1;  % w_41, w_42, w_43 for candidate 4
     0.5, 0.3, 0.2]; % w_51, w_52, w_53 for candidate 5

a1 = [0.5; 0.5; 0.5; 0.5; 0.5]; % Threshold values for each candidate

% approximate the maximum time
t_max = milp_tmax(T); 
T_trans1 = min(1, T ./ t_max);

E_trans1 = 1 - eye(length(a1));
t01 = 0;
e01 = 35;



%% Second input
T_trans2 = ...
[0	0.0840884914627035	0.0864478826597805	0.0864479159943358	0.0864479159943358	0.0874251690858882	0.0874251710760265	0.0874251911642919	0.0874251991643151	0.0897845547186184	0.0897845563654476	0.0897846553591262;
0	0	0.0864478826597805	0.0864479159943358	0.0864479159943358	0.0874251690858882	0.0874251710760265	0.0874251911642919	0.0874251991643151	0.0897845547186184	0.0897845563654476	0.0897846553591262;
0.00235939119707699	0.0864478826597805	0	0.0888073071914128	0.0888073071914128	0.0864478768945948	0.0864478767905462	0.0897845823613689	0.0897845903613921	0.0888072625273250	0.0888072620799672	0.0921440465562031;
0.00235942453163225	0.0864479159943358	0.0888073071914128	0	0.0840884914627035	0.0897845936175205	0.0897845956076588	0.0864478768440029	0.0864478770703034	0.0921439792502507	0.0921439808970798	0.0874252308274939;
0.00235942453163225	0.0864479159943358	0.0888073071914128	0.0840884914627035	0	0.0897845936175205	0.0897845956076588	0.0864478768440029	0.0864478770703034	0.0921439792502507	0.0921439808970798	0.0874252308274939;
0.00333667762318467	0.0874251690858882	0.0864478768945948	0.0897845936175205	0.0897845936175205	0	0.0888072622224375	0.0907618687874766	0.0907618767874998	0.0864478770954337	0.0911666475118585	0.0931213329823108;
0.00333667961332300	0.0874251710760265	0.0864478767905462	0.0897845956076588	0.0897845956076588	0.0888072622224375	0	0.0907618707776149	0.0907618787776381	0.0911666478551677	0.0864478767521246	0.0931213349724492;
0.00333669970158834	0.0874251911642919	0.0897845823613689	0.0864478768440029	0.0864478768440029	0.0907618687874766	0.0907618707776149	0	0.0888072624516027	0.0931212544202067	0.0931212560670359	0.0864479743601165;
0.00333670770161157	0.0874251991643151	0.0897845903613921	0.0864478770703034	0.0864478770703034	0.0907618767874998	0.0907618787776381	0.0888072624516027	0	0.0931212624202300	0.0931212640670592	0.0897846136009777;
0.00569606325591486	0.0897845547186184	0.0888072625273250	0.0921439792502507	0.0921439792502507	0.0864478770954337	0.0911666478551677	0.0931212544202067	0.0931212624202300	0	0.0935260331445887	0.0954807186150410;
0.00569606490274404	0.0897845563654476	0.0888072620799672	0.0921439808970798	0.0921439808970798	0.0911666475118585	0.0864478767521246	0.0931212560670359	0.0931212640670592	0.0935260331445887	0	0.0954807202618702;
0.00569616389642261	0.0897846553591262	0.0921440465562031	0.0874252308274939	0.0874252308274939	0.0931213329823108	0.0931213349724492	0.0864479743601165	0.0897846136009777	0.0954807186150410	0.0954807202618702	0];

T_const2 = 1/2 * ones(12, 2);

E_const2 = 25 * zeros(12, 2);
                                                            
w2 = [0     0     0;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4;
     1     6     4];

a2 = [    0;
    0.0485;
    0.0862;
    0.3119;
    0.0884;
    0.1620;
    0.0741;
    0.1835;
    0.0817;
    0.2338;
    0.1531;
    0.1174];

T_trans2 = round(T_trans2, 4);

E_trans2 = 1 - eye(length(a2));
t02 = 0;
e02 = 35;

%% Optimize
% [model, params, variables] = milp_v2(T_trans1, w1, a1);

% result = gurobi(model, params);
% X = reshape(result.x(variables.X(:)), [variables.n variables.n]);
% T = result.x(variables.T(:));
% U = result.x(variables.U(:));
% delta = result.x(variables.delta(:));
% P = result.x(variables.P(:));
% 
% disp("milp task allocator s: " + result.runtime);
% disp('Optimized Transition Matrix X:');
% disp(X);
% 
% fprintf('Utility Values (U_j):\n');
% for j = 1:length(U)
%     fprintf('U_%d: %.4f\n', j, U(j));
% end
% 
% fprintf('\nElapsed Times T_j:\n');
% for j = 1:length(T)
%     fprintf('T(%d) = %.4f\n', j, T(j));
% end
% 
% fprintf('\nRank Variables P_i:\n');
% for i = 1:length(P)
%     fprintf('P(%d) = %.1f\n', i, P(i));
% end
% 
% fprintf('\nDelta_j:\n');
% for j=1:length(delta)
%     fprintf('delta(%d) = %.1f\n', j, delta(j));
% end

tic
output = milp_lns(T_trans2, E_trans2, T_const2, E_const2, t02, e02, w2, a2, 0, @milp_v1);
toc

fprintf('U_total: %.4f\n', output.u_total);
disp("===========================================")
for j = 1:length(output.x)
    fprintf('X_%d: %.0f\n', j, output.x(j));
end
disp("===========================================")
for j = 1:length(output.t)
    fprintf('T_%d: %.4f\n', j, output.t(j));
end
disp("===========================================")
for j = 1:length(output.e)
    fprintf('E_%d: %.2f\n', j, output.e(j));
end
disp("===========================================")
for j = 1:length(output.u)
    fprintf('U_%d: %.4f\n', j, output.u(j));
end